// Generated by CoffeeScript 1.4.0
(function() {
  var DBI, Setup, filelet, fs, funclet, loglet, path, _;

  funclet = require('funclet');

  filelet = require('filelet');

  loglet = require('loglet');

  path = require('path');

  fs = require('fs');

  DBI = require('easydbi');

  _ = require('underscore');

  Setup = (function() {

    Setup.defaultPath = function() {
      return path.join(process.env.HOME, '.easydbi/setup.json');
    };

    Setup.make = function(filePath) {
      if (filePath == null) {
        filePath = this.defaultPath();
      }
      return new this(filePath);
    };

    function Setup(filePath) {
      this.filePath = filePath;
      this.inner = {};
    }

    Setup.prototype.load = function(cb) {
      var _this = this;
      return funclet.bind(fs.readFile, this.filePath, 'utf8').then(function(data, next) {
        var args;
        try {
          args = JSON.parse(data);
          return next(null, args);
        } catch (e) {
          return next(e);
        }
      })["catch"](function(err) {
        return cb(null);
      }).done(function(data) {
        var key, val;
        try {
          for (key in data) {
            val = data[key];
            _this.setup(key, val);
          }
          return cb(null);
        } catch (e) {
          return cb(e);
        }
      });
    };

    Setup.prototype.setup = function(key, options) {
      if (this.inner.hasOwnProperty(key)) {
        throw {
          error: 'duplicate_key',
          key: key
        };
      }
      DBI.setup(key, options);
      return this.inner[key] = options;
    };

    Setup.prototype.replacePwd = function(pass) {
      var i;
      return ((function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = pass.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push('*');
        }
        return _results;
      })()).join('');
    };

    Setup.prototype.showSetups = function() {
      var key, opt, options, setups, type, _ref, _ref1;
      setups = {};
      _ref = this.inner;
      for (key in _ref) {
        _ref1 = _ref[key], type = _ref1.type, options = _ref1.options;
        opt = _.extend({}, options);
        if (opt.password) {
          opt.password = this.replacePwd(opt.password);
        }
        setups[key] = {
          type: type,
          options: opt
        };
      }
      return setups;
    };

    Setup.prototype.save = function(cb) {
      var _this = this;
      return funclet.start(function(next) {
        return filelet.mkdirp(path.dirname(_this.filePath), function(err) {
          return next(err);
        });
      }).then(function(next) {
        return fs.writeFile(_this.filePath, JSON.stringify(_this.inner), 'utf8', next);
      })["catch"](cb).done(function() {
        return cb(null);
      });
    };

    return Setup;

  })();

  module.exports = Setup;

}).call(this);
