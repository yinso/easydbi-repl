// Generated by CoffeeScript 1.4.0
(function() {
  var History, Runtime, Setup, cmdParser, cmdString, coffee, funclet, history, innerEval, loglet, myEval, path, repl, replExit, run, runCommand, runtime, setup, startRepl;

  repl = require('repl');

  loglet = require('loglet');

  funclet = require('funclet');

  repl = require('repl');

  path = require('path');

  coffee = require('coffee-script');

  cmdParser = require('./command');

  Runtime = require('./runtime');

  History = require('./history');

  Setup = require('./setup');

  history = History.make();

  setup = Setup.make();

  runtime = new Runtime();

  cmdString = function(cmd) {
    return cmd.substring(1, cmd.length - 2);
  };

  runCommand = function(cmd, cb) {
    switch (cmd.command) {
      case 'setup':
        try {
          setup.setup(cmd.args[0], {
            type: cmd.args[1],
            options: cmd.args[2]
          });
          return cb(null);
        } catch (e) {
          return cb(e);
        }
        break;
      case 'showSetups':
        try {
          return cb(null, setup.showSetups());
        } catch (e) {
          return cb(e);
        }
        break;
      case 'use':
        return runtime.connect(cmd.args[0], cb);
      case 'showTables':
        return runtime.showTables(cb);
      case 'showColumns':
        return runtime.showColumns(cmd.args[0], cb);
      case 'load':
        return runtime.loadScript(cmd.args[0], cb);
      case 'deploy':
        return runtime.deploy(cmd.args[0], cmd.args[1], cb);
      case 'quit':
        return replExit();
      case 'require':
        return runtime.requireModule(cmd.args[0], cb);
      case 'conn':
        return runtime.display('conn', cb);
      default:
        return cb({
          error: 'unknown_command',
          command: cmd.command,
          args: cmd.args
        });
    }
  };

  innerEval = function(stmt, cb) {
    var parsed;
    if (stmt === '') {
      return cb(null);
    } else if (stmt.match(/^\:/)) {
      stmt = stmt.substring(1);
      try {
        parsed = cmdParser.parse(stmt);
        return runCommand(parsed, function(err, res) {
          if (err) {
            loglet.error(err);
            return cb(null);
          } else {
            return cb(null, res);
          }
        });
      } catch (e) {
        loglet.error(e);
        return cb(null);
      }
    } else {
      return runtime["eval"](stmt, function(err, res) {
        if (err) {
          loglet.error(err);
          return cb(null);
        } else {
          history.log(stmt);
          return cb(null, res);
        }
      });
    }
  };

  myEval = function(cmd, context, filename, cb) {
    var stmt;
    stmt = cmdString(cmd);
    return innerEval(stmt, cb);
  };

  replExit = function() {
    loglet.log('exiting...');
    return funclet.start(function(next) {
      return history.save(next);
    }).then(function(next) {
      return setup.save(next);
    })["catch"](function(err) {
      return runtime.exit(function(err) {
        return process.exit();
      });
    }).done(function() {
      return runtime.exit(function(err) {
        return process.exit();
      });
    });
  };

  startRepl = function(argv) {
    return funclet.start(function(next) {
      if (argv.use) {
        return innerEval(":use('" + argv.use + "')", function(err) {
          if (err) {
            return next(err);
          } else {
            return next(null);
          }
        });
      } else {
        return next(null);
      }
    })["catch"](function(err) {
      loglet.error(err);
      return replExit();
    }).done(function() {
      var inst;
      inst = repl.start({
        prompt: 'dbi> ',
        input: process.stdin,
        output: process.stdout,
        "eval": myEval
      });
      inst.on('exit', replExit);
      return history.bind(inst);
    });
  };

  run = function(argv) {
    return funclet.start(function(next) {
      return setup.load(next);
    }).then(function(next) {
      return history.load(next);
    })["catch"](function(err) {
      return loglet.croak(err);
    }).done(function() {
      return startRepl(argv);
    });
  };

  module.exports = {
    run: run
  };

}).call(this);
